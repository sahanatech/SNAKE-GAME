import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Constants
WINDOW_SIZE = WINDOW_WIDTH, WINDOW_HEIGHT = 600, 400
GRID_SIZE = GRID_WIDTH, GRID_HEIGHT = 20, 20
GRID_UNIT_SIZE = UNIT_WIDTH, UNIT_HEIGHT = WINDOW_WIDTH // GRID_WIDTH, WINDOW_HEIGHT // GRID_HEIGHT
FPS = 10

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)

# Directions
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

class SnakeGame:
    def _init_(self):
        self.window = pygame.display.set_mode(WINDOW_SIZE)
        pygame.display.set_caption('Snake Game')
        self.clock = pygame.time.Clock()
        self.snake = [(GRID_WIDTH // 2, GRID_HEIGHT // 2)]
        self.direction = RIGHT
        self.food = self.random_food()
        self.score = 0
        self.game_over = False

    def random_food(self):
        while True:
            x = random.randint(0, GRID_WIDTH - 1)
            y = random.randint(0, GRID_HEIGHT - 1)
            if (x, y) not in self.snake:
                return x, y

    def draw_grid(self):
        for x in range(0, WINDOW_WIDTH, GRID_UNIT_SIZE[0]):
            pygame.draw.line(self.window, BLACK, (x, 0), (x, WINDOW_HEIGHT))
        for y in range(0, WINDOW_HEIGHT, GRID_UNIT_SIZE[1]):
            pygame.draw.line(self.window, BLACK, (0, y), (WINDOW_WIDTH, y))

    def draw_snake(self):
        for segment in self.snake:
            pygame.draw.rect(self.window, GREEN, (segment[0] * GRID_UNIT_SIZE[0], segment[1] * GRID_UNIT_SIZE[1], GRID_UNIT_SIZE[0], GRID_UNIT_SIZE[1]))

    def draw_food(self):
        pygame.draw.rect(self.window, RED, (self.food[0] * GRID_UNIT_SIZE[0], self.food[1] * GRID_UNIT_SIZE[1], GRID_UNIT_SIZE[0], GRID_UNIT_SIZE[1]))

    def check_collision(self, x, y):
        if x < 0 or x >= GRID_WIDTH or y < 0 or y >= GRID_HEIGHT or (x, y) in self.snake[:-1]:
            return True
        return False

    def update_snake_position(self):
        new_head = (self.snake[0][0] + self.direction[0], self.snake[0][1] + self.direction[1])
        if self.check_collision(*new_head):
            self.game_over = True
            return

        self.snake.insert(0, new_head)

        if new_head == self.food:
            self.score += 1
            self.food = self.random_food()
        else:
            self.snake.pop()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and self.direction != DOWN:
                    self.direction = UP
                elif event.key == pygame.K_DOWN and self.direction != UP:
                    self.direction = DOWN
                elif event.key == pygame.K_LEFT and self.direction != RIGHT:
                    self.direction = LEFT
                elif event.key == pygame.K_RIGHT and self.direction != LEFT:
                    self.direction = RIGHT

    def display_score(self):
        font = pygame.font.Font(None, 36)
        score_text = font.render(f'Score: {self.score}', True, BLACK)
        self.window.blit(score_text, (10, 10))

    def run(self):
        while not self.game_over:
            self.handle_events()
            self.update_snake_position()

            self.window.fill(WHITE)
            self.draw_grid()
            self.draw_snake()
            self.draw_food()
            self.display_score()
            pygame.display.flip()

            self.clock.tick(FPS)

        self.display_game_over_message()

    def display_game_over_message(self):
        font = pygame.font.Font(None, 48)
        game_over_text = font.render('Game Over!', True, BLACK)
        score_text = font.render(f'Score: {self.score}', True, BLACK)
        game_over_rect = game_over_text.get_rect(center=(WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2 - 50))
        score_rect = score_text.get_rect(center=(WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2 + 50))

        self.window.fill(WHITE)
        self.window.blit(game_over_text, game_over_rect)
        self.window.blit(score_text, score_rect)
        pygame.display.flip()

        pygame.time.wait(3000)  # Display game over message for 3 seconds
        pygame.quit()
        sys.exit()

if _name_ == '_main_':
    game = SnakeGame()
    game.run()
